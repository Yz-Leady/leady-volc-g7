<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class HistoryVersionForGetServiceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HistoryVersionForGetServiceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'apig_config' => '\Volcengine\Mlplatform20240701\Model\ApigConfigForGetServiceOutput',
        'clb_config' => '\Volcengine\Mlplatform20240701\Model\CLBConfigForGetServiceOutput',
        'change_type' => 'string',
        'create_time' => 'string',
        'id' => 'string',
        'ports' => '\Volcengine\Mlplatform20240701\Model\PortForGetServiceOutput[]',
        'traffic_config' => '\Volcengine\Mlplatform20240701\Model\TrafficConfigForGetServiceOutput',
        'vpc_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'apig_config' => null,
        'clb_config' => null,
        'change_type' => null,
        'create_time' => null,
        'id' => null,
        'ports' => null,
        'traffic_config' => null,
        'vpc_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apig_config' => 'ApigConfig',
        'clb_config' => 'CLBConfig',
        'change_type' => 'ChangeType',
        'create_time' => 'CreateTime',
        'id' => 'Id',
        'ports' => 'Ports',
        'traffic_config' => 'TrafficConfig',
        'vpc_id' => 'VpcId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apig_config' => 'setApigConfig',
        'clb_config' => 'setClbConfig',
        'change_type' => 'setChangeType',
        'create_time' => 'setCreateTime',
        'id' => 'setId',
        'ports' => 'setPorts',
        'traffic_config' => 'setTrafficConfig',
        'vpc_id' => 'setVpcId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apig_config' => 'getApigConfig',
        'clb_config' => 'getClbConfig',
        'change_type' => 'getChangeType',
        'create_time' => 'getCreateTime',
        'id' => 'getId',
        'ports' => 'getPorts',
        'traffic_config' => 'getTrafficConfig',
        'vpc_id' => 'getVpcId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHANGE_TYPE_CREATE_SERVICE = 'CreateService';
    const CHANGE_TYPE_UPDATE_SERVICE = 'UpdateService';
    const CHANGE_TYPE_MIGRATE_SERVICE = 'MigrateService';
    const CHANGE_TYPE_STOP_SERVICE = 'StopService';
    const CHANGE_TYPE_START_SERVICE = 'StartService';
    const CHANGE_TYPE_DELETE_SERVICE = 'DeleteService';
    const CHANGE_TYPE_CREATE_DEPLOYMENT = 'CreateDeployment';
    const CHANGE_TYPE_UPDATE_DEPLOYMENT = 'UpdateDeployment';
    const CHANGE_TYPE_MIGRATE_DEPLOYMENT = 'MigrateDeployment';
    const CHANGE_TYPE_STOP_DEPLOYMENT = 'StopDeployment';
    const CHANGE_TYPE_START_DEPLOYMENT = 'StartDeployment';
    const CHANGE_TYPE_SCALE_DEPLOYMENT = 'ScaleDeployment';
    const CHANGE_TYPE_DELETE_DEPLOYMENT = 'DeleteDeployment';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChangeTypeAllowableValues()
    {
        return [
            self::CHANGE_TYPE_CREATE_SERVICE,
            self::CHANGE_TYPE_UPDATE_SERVICE,
            self::CHANGE_TYPE_MIGRATE_SERVICE,
            self::CHANGE_TYPE_STOP_SERVICE,
            self::CHANGE_TYPE_START_SERVICE,
            self::CHANGE_TYPE_DELETE_SERVICE,
            self::CHANGE_TYPE_CREATE_DEPLOYMENT,
            self::CHANGE_TYPE_UPDATE_DEPLOYMENT,
            self::CHANGE_TYPE_MIGRATE_DEPLOYMENT,
            self::CHANGE_TYPE_STOP_DEPLOYMENT,
            self::CHANGE_TYPE_START_DEPLOYMENT,
            self::CHANGE_TYPE_SCALE_DEPLOYMENT,
            self::CHANGE_TYPE_DELETE_DEPLOYMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apig_config'] = isset($data['apig_config']) ? $data['apig_config'] : null;
        $this->container['clb_config'] = isset($data['clb_config']) ? $data['clb_config'] : null;
        $this->container['change_type'] = isset($data['change_type']) ? $data['change_type'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ports'] = isset($data['ports']) ? $data['ports'] : null;
        $this->container['traffic_config'] = isset($data['traffic_config']) ? $data['traffic_config'] : null;
        $this->container['vpc_id'] = isset($data['vpc_id']) ? $data['vpc_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChangeTypeAllowableValues();
        if (!is_null($this->container['change_type']) && !in_array($this->container['change_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'change_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apig_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\ApigConfigForGetServiceOutput
     */
    public function getApigConfig()
    {
        return $this->container['apig_config'];
    }

    /**
     * Sets apig_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\ApigConfigForGetServiceOutput $apig_config apig_config
     *
     * @return $this
     */
    public function setApigConfig($apig_config)
    {
        $this->container['apig_config'] = $apig_config;

        return $this;
    }

    /**
     * Gets clb_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\CLBConfigForGetServiceOutput
     */
    public function getClbConfig()
    {
        return $this->container['clb_config'];
    }

    /**
     * Sets clb_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\CLBConfigForGetServiceOutput $clb_config clb_config
     *
     * @return $this
     */
    public function setClbConfig($clb_config)
    {
        $this->container['clb_config'] = $clb_config;

        return $this;
    }

    /**
     * Gets change_type
     *
     * @return string
     */
    public function getChangeType()
    {
        return $this->container['change_type'];
    }

    /**
     * Sets change_type
     *
     * @param string $change_type change_type
     *
     * @return $this
     */
    public function setChangeType($change_type)
    {
        $allowedValues = $this->getChangeTypeAllowableValues();
        if (!is_null($change_type) && !in_array($change_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'change_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['change_type'] = $change_type;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \Volcengine\Mlplatform20240701\Model\PortForGetServiceOutput[]
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \Volcengine\Mlplatform20240701\Model\PortForGetServiceOutput[] $ports ports
     *
     * @return $this
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets traffic_config
     *
     * @return \Volcengine\Mlplatform20240701\Model\TrafficConfigForGetServiceOutput
     */
    public function getTrafficConfig()
    {
        return $this->container['traffic_config'];
    }

    /**
     * Sets traffic_config
     *
     * @param \Volcengine\Mlplatform20240701\Model\TrafficConfigForGetServiceOutput $traffic_config traffic_config
     *
     * @return $this
     */
    public function setTrafficConfig($traffic_config)
    {
        $this->container['traffic_config'] = $traffic_config;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string $vpc_id vpc_id
     *
     * @return $this
     */
    public function setVpcId($vpc_id)
    {
        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

