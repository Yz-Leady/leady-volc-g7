<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListVolumeTypesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListVolumeTypesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'maximum_bandwidth_mbps' => 'int',
        'maximum_iops' => 'int',
        'name' => 'string',
        'price_by_day' => 'double',
        'price_by_hour' => 'double',
        'price_by_month' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'maximum_bandwidth_mbps' => 'int32',
        'maximum_iops' => 'int32',
        'name' => null,
        'price_by_day' => 'double',
        'price_by_hour' => 'double',
        'price_by_month' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'maximum_bandwidth_mbps' => 'MaximumBandwidthMbps',
        'maximum_iops' => 'MaximumIops',
        'name' => 'Name',
        'price_by_day' => 'PriceByDay',
        'price_by_hour' => 'PriceByHour',
        'price_by_month' => 'PriceByMonth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'maximum_bandwidth_mbps' => 'setMaximumBandwidthMbps',
        'maximum_iops' => 'setMaximumIops',
        'name' => 'setName',
        'price_by_day' => 'setPriceByDay',
        'price_by_hour' => 'setPriceByHour',
        'price_by_month' => 'setPriceByMonth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'maximum_bandwidth_mbps' => 'getMaximumBandwidthMbps',
        'maximum_iops' => 'getMaximumIops',
        'name' => 'getName',
        'price_by_day' => 'getPriceByDay',
        'price_by_hour' => 'getPriceByHour',
        'price_by_month' => 'getPriceByMonth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['maximum_bandwidth_mbps'] = isset($data['maximum_bandwidth_mbps']) ? $data['maximum_bandwidth_mbps'] : null;
        $this->container['maximum_iops'] = isset($data['maximum_iops']) ? $data['maximum_iops'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['price_by_day'] = isset($data['price_by_day']) ? $data['price_by_day'] : null;
        $this->container['price_by_hour'] = isset($data['price_by_hour']) ? $data['price_by_hour'] : null;
        $this->container['price_by_month'] = isset($data['price_by_month']) ? $data['price_by_month'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets maximum_bandwidth_mbps
     *
     * @return int
     */
    public function getMaximumBandwidthMbps()
    {
        return $this->container['maximum_bandwidth_mbps'];
    }

    /**
     * Sets maximum_bandwidth_mbps
     *
     * @param int $maximum_bandwidth_mbps maximum_bandwidth_mbps
     *
     * @return $this
     */
    public function setMaximumBandwidthMbps($maximum_bandwidth_mbps)
    {
        $this->container['maximum_bandwidth_mbps'] = $maximum_bandwidth_mbps;

        return $this;
    }

    /**
     * Gets maximum_iops
     *
     * @return int
     */
    public function getMaximumIops()
    {
        return $this->container['maximum_iops'];
    }

    /**
     * Sets maximum_iops
     *
     * @param int $maximum_iops maximum_iops
     *
     * @return $this
     */
    public function setMaximumIops($maximum_iops)
    {
        $this->container['maximum_iops'] = $maximum_iops;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets price_by_day
     *
     * @return double
     */
    public function getPriceByDay()
    {
        return $this->container['price_by_day'];
    }

    /**
     * Sets price_by_day
     *
     * @param double $price_by_day price_by_day
     *
     * @return $this
     */
    public function setPriceByDay($price_by_day)
    {
        $this->container['price_by_day'] = $price_by_day;

        return $this;
    }

    /**
     * Gets price_by_hour
     *
     * @return double
     */
    public function getPriceByHour()
    {
        return $this->container['price_by_hour'];
    }

    /**
     * Sets price_by_hour
     *
     * @param double $price_by_hour price_by_hour
     *
     * @return $this
     */
    public function setPriceByHour($price_by_hour)
    {
        $this->container['price_by_hour'] = $price_by_hour;

        return $this;
    }

    /**
     * Gets price_by_month
     *
     * @return double
     */
    public function getPriceByMonth()
    {
        return $this->container['price_by_month'];
    }

    /**
     * Sets price_by_month
     *
     * @param double $price_by_month price_by_month
     *
     * @return $this
     */
    public function setPriceByMonth($price_by_month)
    {
        $this->container['price_by_month'] = $price_by_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

