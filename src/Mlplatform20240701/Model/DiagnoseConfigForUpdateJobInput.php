<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class DiagnoseConfigForUpdateJobInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiagnoseConfigForUpdateJobInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'detection_interval_seconds' => 'int',
        'first_detection_wait_seconds' => 'int',
        'name' => 'string',
        'triggers' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'detection_interval_seconds' => 'int64',
        'first_detection_wait_seconds' => 'int64',
        'name' => null,
        'triggers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'detection_interval_seconds' => 'DetectionIntervalSeconds',
        'first_detection_wait_seconds' => 'FirstDetectionWaitSeconds',
        'name' => 'Name',
        'triggers' => 'Triggers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'detection_interval_seconds' => 'setDetectionIntervalSeconds',
        'first_detection_wait_seconds' => 'setFirstDetectionWaitSeconds',
        'name' => 'setName',
        'triggers' => 'setTriggers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'detection_interval_seconds' => 'getDetectionIntervalSeconds',
        'first_detection_wait_seconds' => 'getFirstDetectionWaitSeconds',
        'name' => 'getName',
        'triggers' => 'getTriggers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NAME_ENVIRONMENTAL_DIAGNOSIS = 'EnvironmentalDiagnosis';
    const NAME_PYTHON_DETECTION = 'PythonDetection';
    const NAME_LOG_DETECTION = 'LogDetection';
    const TRIGGERS_BEFORE_START = 'BeforeStart';
    const TRIGGERS_JOB_RUNNING = 'JobRunning';
    const TRIGGERS_JOB_FAILED = 'JobFailed';
    const TRIGGERS_STOP_BY_USER = 'StopByUser';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNameAllowableValues()
    {
        return [
            self::NAME_ENVIRONMENTAL_DIAGNOSIS,
            self::NAME_PYTHON_DETECTION,
            self::NAME_LOG_DETECTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggersAllowableValues()
    {
        return [
            self::TRIGGERS_BEFORE_START,
            self::TRIGGERS_JOB_RUNNING,
            self::TRIGGERS_JOB_FAILED,
            self::TRIGGERS_STOP_BY_USER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['detection_interval_seconds'] = isset($data['detection_interval_seconds']) ? $data['detection_interval_seconds'] : null;
        $this->container['first_detection_wait_seconds'] = isset($data['first_detection_wait_seconds']) ? $data['first_detection_wait_seconds'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['triggers'] = isset($data['triggers']) ? $data['triggers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNameAllowableValues();
        if (!is_null($this->container['name']) && !in_array($this->container['name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets detection_interval_seconds
     *
     * @return int
     */
    public function getDetectionIntervalSeconds()
    {
        return $this->container['detection_interval_seconds'];
    }

    /**
     * Sets detection_interval_seconds
     *
     * @param int $detection_interval_seconds detection_interval_seconds
     *
     * @return $this
     */
    public function setDetectionIntervalSeconds($detection_interval_seconds)
    {
        $this->container['detection_interval_seconds'] = $detection_interval_seconds;

        return $this;
    }

    /**
     * Gets first_detection_wait_seconds
     *
     * @return int
     */
    public function getFirstDetectionWaitSeconds()
    {
        return $this->container['first_detection_wait_seconds'];
    }

    /**
     * Sets first_detection_wait_seconds
     *
     * @param int $first_detection_wait_seconds first_detection_wait_seconds
     *
     * @return $this
     */
    public function setFirstDetectionWaitSeconds($first_detection_wait_seconds)
    {
        $this->container['first_detection_wait_seconds'] = $first_detection_wait_seconds;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $allowedValues = $this->getNameAllowableValues();
        if (!is_null($name) && !in_array($name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets triggers
     *
     * @return string[]
     */
    public function getTriggers()
    {
        return $this->container['triggers'];
    }

    /**
     * Sets triggers
     *
     * @param string[] $triggers triggers
     *
     * @return $this
     */
    public function setTriggers($triggers)
    {
        $allowedValues = $this->getTriggersAllowableValues();
        if (!is_null($triggers) && array_diff($triggers, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'triggers', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['triggers'] = $triggers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

