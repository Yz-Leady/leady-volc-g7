<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class NodeAffinitySpecForUpdateDevInstanceInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodeAffinitySpecForUpdateDevInstanceInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gpucpu_node_preference' => 'string',
        'strategy_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gpucpu_node_preference' => null,
        'strategy_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gpucpu_node_preference' => 'GPUCPUNodePreference',
        'strategy_type' => 'StrategyType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gpucpu_node_preference' => 'setGpucpuNodePreference',
        'strategy_type' => 'setStrategyType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gpucpu_node_preference' => 'getGpucpuNodePreference',
        'strategy_type' => 'getStrategyType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GPUCPU_NODE_PREFERENCE_GPU_REQUIRED = 'GPURequired';
    const GPUCPU_NODE_PREFERENCE_GPU_PREFERRED = 'GPUPreferred';
    const GPUCPU_NODE_PREFERENCE_CPU_REQUIRED = 'CPURequired';
    const GPUCPU_NODE_PREFERENCE_CPU_PREFERRED = 'CPUPreferred';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGpucpuNodePreferenceAllowableValues()
    {
        return [
            self::GPUCPU_NODE_PREFERENCE_GPU_REQUIRED,
            self::GPUCPU_NODE_PREFERENCE_GPU_PREFERRED,
            self::GPUCPU_NODE_PREFERENCE_CPU_REQUIRED,
            self::GPUCPU_NODE_PREFERENCE_CPU_PREFERRED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gpucpu_node_preference'] = isset($data['gpucpu_node_preference']) ? $data['gpucpu_node_preference'] : null;
        $this->container['strategy_type'] = isset($data['strategy_type']) ? $data['strategy_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGpucpuNodePreferenceAllowableValues();
        if (!is_null($this->container['gpucpu_node_preference']) && !in_array($this->container['gpucpu_node_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gpucpu_node_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gpucpu_node_preference
     *
     * @return string
     */
    public function getGpucpuNodePreference()
    {
        return $this->container['gpucpu_node_preference'];
    }

    /**
     * Sets gpucpu_node_preference
     *
     * @param string $gpucpu_node_preference gpucpu_node_preference
     *
     * @return $this
     */
    public function setGpucpuNodePreference($gpucpu_node_preference)
    {
        $allowedValues = $this->getGpucpuNodePreferenceAllowableValues();
        if (!is_null($gpucpu_node_preference) && !in_array($gpucpu_node_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gpucpu_node_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gpucpu_node_preference'] = $gpucpu_node_preference;

        return $this;
    }

    /**
     * Gets strategy_type
     *
     * @return string
     */
    public function getStrategyType()
    {
        return $this->container['strategy_type'];
    }

    /**
     * Sets strategy_type
     *
     * @param string $strategy_type strategy_type
     *
     * @return $this
     */
    public function setStrategyType($strategy_type)
    {
        $this->container['strategy_type'] = $strategy_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

