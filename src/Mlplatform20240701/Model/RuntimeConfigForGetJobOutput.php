<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RuntimeConfigForGetJobOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RuntimeConfigForGetJobOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'advance_args' => 'string',
        'code' => '\Volcengine\Mlplatform20240701\Model\CodeForGetJobOutput',
        'command' => 'string',
        'envs' => '\Volcengine\Mlplatform20240701\Model\EnvForGetJobOutput[]',
        'framework' => 'string',
        'image' => '\Volcengine\Mlplatform20240701\Model\ImageForGetJobOutput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'advance_args' => null,
        'code' => null,
        'command' => null,
        'envs' => null,
        'framework' => null,
        'image' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advance_args' => 'AdvanceArgs',
        'code' => 'Code',
        'command' => 'Command',
        'envs' => 'Envs',
        'framework' => 'Framework',
        'image' => 'Image'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advance_args' => 'setAdvanceArgs',
        'code' => 'setCode',
        'command' => 'setCommand',
        'envs' => 'setEnvs',
        'framework' => 'setFramework',
        'image' => 'setImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advance_args' => 'getAdvanceArgs',
        'code' => 'getCode',
        'command' => 'getCommand',
        'envs' => 'getEnvs',
        'framework' => 'getFramework',
        'image' => 'getImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FRAMEWORK_PY_TORCH = 'PyTorch';
    const FRAMEWORK_MPI = 'MPI';
    const FRAMEWORK_RAY = 'Ray';
    const FRAMEWORK_TENSOR_FLOW = 'TensorFlow';
    const FRAMEWORK_CUSTOM = 'Custom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrameworkAllowableValues()
    {
        return [
            self::FRAMEWORK_PY_TORCH,
            self::FRAMEWORK_MPI,
            self::FRAMEWORK_RAY,
            self::FRAMEWORK_TENSOR_FLOW,
            self::FRAMEWORK_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['advance_args'] = isset($data['advance_args']) ? $data['advance_args'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['command'] = isset($data['command']) ? $data['command'] : null;
        $this->container['envs'] = isset($data['envs']) ? $data['envs'] : null;
        $this->container['framework'] = isset($data['framework']) ? $data['framework'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFrameworkAllowableValues();
        if (!is_null($this->container['framework']) && !in_array($this->container['framework'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'framework', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advance_args
     *
     * @return string
     */
    public function getAdvanceArgs()
    {
        return $this->container['advance_args'];
    }

    /**
     * Sets advance_args
     *
     * @param string $advance_args advance_args
     *
     * @return $this
     */
    public function setAdvanceArgs($advance_args)
    {
        $this->container['advance_args'] = $advance_args;

        return $this;
    }

    /**
     * Gets code
     *
     * @return \Volcengine\Mlplatform20240701\Model\CodeForGetJobOutput
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param \Volcengine\Mlplatform20240701\Model\CodeForGetJobOutput $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets command
     *
     * @return string
     */
    public function getCommand()
    {
        return $this->container['command'];
    }

    /**
     * Sets command
     *
     * @param string $command command
     *
     * @return $this
     */
    public function setCommand($command)
    {
        $this->container['command'] = $command;

        return $this;
    }

    /**
     * Gets envs
     *
     * @return \Volcengine\Mlplatform20240701\Model\EnvForGetJobOutput[]
     */
    public function getEnvs()
    {
        return $this->container['envs'];
    }

    /**
     * Sets envs
     *
     * @param \Volcengine\Mlplatform20240701\Model\EnvForGetJobOutput[] $envs envs
     *
     * @return $this
     */
    public function setEnvs($envs)
    {
        $this->container['envs'] = $envs;

        return $this;
    }

    /**
     * Gets framework
     *
     * @return string
     */
    public function getFramework()
    {
        return $this->container['framework'];
    }

    /**
     * Sets framework
     *
     * @param string $framework framework
     *
     * @return $this
     */
    public function setFramework($framework)
    {
        $allowedValues = $this->getFrameworkAllowableValues();
        if (!is_null($framework) && !in_array($framework, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'framework', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['framework'] = $framework;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Volcengine\Mlplatform20240701\Model\ImageForGetJobOutput
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Volcengine\Mlplatform20240701\Model\ImageForGetJobOutput $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

