<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListJobInstancesOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListJobInstancesOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time' => 'string',
        'created_by' => 'string',
        'debug_server' => '\Volcengine\Mlplatform20240701\Model\DebugServerForListJobInstancesOutput',
        'description' => 'string',
        'id' => 'string',
        'index' => 'string',
        'ips' => '\Volcengine\Mlplatform20240701\Model\IpsForListJobInstancesOutput',
        'name' => 'string',
        'resource_claim' => '\Volcengine\Mlplatform20240701\Model\ResourceClaimForListJobInstancesOutput',
        'status' => '\Volcengine\Mlplatform20240701\Model\StatusForListJobInstancesOutput',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time' => null,
        'created_by' => null,
        'debug_server' => null,
        'description' => null,
        'id' => null,
        'index' => null,
        'ips' => null,
        'name' => null,
        'resource_claim' => null,
        'status' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'CreateTime',
        'created_by' => 'CreatedBy',
        'debug_server' => 'DebugServer',
        'description' => 'Description',
        'id' => 'Id',
        'index' => 'Index',
        'ips' => 'Ips',
        'name' => 'Name',
        'resource_claim' => 'ResourceClaim',
        'status' => 'Status',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'created_by' => 'setCreatedBy',
        'debug_server' => 'setDebugServer',
        'description' => 'setDescription',
        'id' => 'setId',
        'index' => 'setIndex',
        'ips' => 'setIps',
        'name' => 'setName',
        'resource_claim' => 'setResourceClaim',
        'status' => 'setStatus',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'created_by' => 'getCreatedBy',
        'debug_server' => 'getDebugServer',
        'description' => 'getDescription',
        'id' => 'getId',
        'index' => 'getIndex',
        'ips' => 'getIps',
        'name' => 'getName',
        'resource_claim' => 'getResourceClaim',
        'status' => 'getStatus',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['debug_server'] = isset($data['debug_server']) ? $data['debug_server'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['ips'] = isset($data['ips']) ? $data['ips'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['resource_claim'] = isset($data['resource_claim']) ? $data['resource_claim'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets debug_server
     *
     * @return \Volcengine\Mlplatform20240701\Model\DebugServerForListJobInstancesOutput
     */
    public function getDebugServer()
    {
        return $this->container['debug_server'];
    }

    /**
     * Sets debug_server
     *
     * @param \Volcengine\Mlplatform20240701\Model\DebugServerForListJobInstancesOutput $debug_server debug_server
     *
     * @return $this
     */
    public function setDebugServer($debug_server)
    {
        $this->container['debug_server'] = $debug_server;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets index
     *
     * @return string
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param string $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets ips
     *
     * @return \Volcengine\Mlplatform20240701\Model\IpsForListJobInstancesOutput
     */
    public function getIps()
    {
        return $this->container['ips'];
    }

    /**
     * Sets ips
     *
     * @param \Volcengine\Mlplatform20240701\Model\IpsForListJobInstancesOutput $ips ips
     *
     * @return $this
     */
    public function setIps($ips)
    {
        $this->container['ips'] = $ips;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets resource_claim
     *
     * @return \Volcengine\Mlplatform20240701\Model\ResourceClaimForListJobInstancesOutput
     */
    public function getResourceClaim()
    {
        return $this->container['resource_claim'];
    }

    /**
     * Sets resource_claim
     *
     * @param \Volcengine\Mlplatform20240701\Model\ResourceClaimForListJobInstancesOutput $resource_claim resource_claim
     *
     * @return $this
     */
    public function setResourceClaim($resource_claim)
    {
        $this->container['resource_claim'] = $resource_claim;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Volcengine\Mlplatform20240701\Model\StatusForListJobInstancesOutput
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Volcengine\Mlplatform20240701\Model\StatusForListJobInstancesOutput $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

