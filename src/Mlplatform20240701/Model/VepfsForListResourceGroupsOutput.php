<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class VepfsForListResourceGroupsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VepfsForListResourceGroupsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file_system_ids' => 'string[]',
        'mount_service_id' => 'string',
        'prefetch_enabled' => 'bool',
        'unavailable_node_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'file_system_ids' => null,
        'mount_service_id' => null,
        'prefetch_enabled' => null,
        'unavailable_node_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_system_ids' => 'FileSystemIds',
        'mount_service_id' => 'MountServiceId',
        'prefetch_enabled' => 'PrefetchEnabled',
        'unavailable_node_count' => 'UnavailableNodeCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_system_ids' => 'setFileSystemIds',
        'mount_service_id' => 'setMountServiceId',
        'prefetch_enabled' => 'setPrefetchEnabled',
        'unavailable_node_count' => 'setUnavailableNodeCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_system_ids' => 'getFileSystemIds',
        'mount_service_id' => 'getMountServiceId',
        'prefetch_enabled' => 'getPrefetchEnabled',
        'unavailable_node_count' => 'getUnavailableNodeCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_system_ids'] = isset($data['file_system_ids']) ? $data['file_system_ids'] : null;
        $this->container['mount_service_id'] = isset($data['mount_service_id']) ? $data['mount_service_id'] : null;
        $this->container['prefetch_enabled'] = isset($data['prefetch_enabled']) ? $data['prefetch_enabled'] : null;
        $this->container['unavailable_node_count'] = isset($data['unavailable_node_count']) ? $data['unavailable_node_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_system_ids
     *
     * @return string[]
     */
    public function getFileSystemIds()
    {
        return $this->container['file_system_ids'];
    }

    /**
     * Sets file_system_ids
     *
     * @param string[] $file_system_ids file_system_ids
     *
     * @return $this
     */
    public function setFileSystemIds($file_system_ids)
    {
        $this->container['file_system_ids'] = $file_system_ids;

        return $this;
    }

    /**
     * Gets mount_service_id
     *
     * @return string
     */
    public function getMountServiceId()
    {
        return $this->container['mount_service_id'];
    }

    /**
     * Sets mount_service_id
     *
     * @param string $mount_service_id mount_service_id
     *
     * @return $this
     */
    public function setMountServiceId($mount_service_id)
    {
        $this->container['mount_service_id'] = $mount_service_id;

        return $this;
    }

    /**
     * Gets prefetch_enabled
     *
     * @return bool
     */
    public function getPrefetchEnabled()
    {
        return $this->container['prefetch_enabled'];
    }

    /**
     * Sets prefetch_enabled
     *
     * @param bool $prefetch_enabled prefetch_enabled
     *
     * @return $this
     */
    public function setPrefetchEnabled($prefetch_enabled)
    {
        $this->container['prefetch_enabled'] = $prefetch_enabled;

        return $this;
    }

    /**
     * Gets unavailable_node_count
     *
     * @return int
     */
    public function getUnavailableNodeCount()
    {
        return $this->container['unavailable_node_count'];
    }

    /**
     * Sets unavailable_node_count
     *
     * @param int $unavailable_node_count unavailable_node_count
     *
     * @return $this
     */
    public function setUnavailableNodeCount($unavailable_node_count)
    {
        $this->container['unavailable_node_count'] = $unavailable_node_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

