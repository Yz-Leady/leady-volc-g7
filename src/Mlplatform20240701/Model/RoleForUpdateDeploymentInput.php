<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class RoleForUpdateDeploymentInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RoleForUpdateDeploymentInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'command' => 'string',
        'credential' => '\Volcengine\Mlplatform20240701\Model\CredentialForUpdateDeploymentInput',
        'envs' => '\Volcengine\Mlplatform20240701\Model\EnvForUpdateDeploymentInput[]',
        'expose' => 'bool',
        'graceful_shutdown_period' => 'int',
        'id' => 'string',
        'image' => '\Volcengine\Mlplatform20240701\Model\ImageForUpdateDeploymentInput',
        'liveness_probe' => '\Volcengine\Mlplatform20240701\Model\LivenessProbeForUpdateDeploymentInput',
        'model' => '\Volcengine\Mlplatform20240701\Model\ModelForUpdateDeploymentInput',
        'name' => 'string',
        'node_affinity_spec' => '\Volcengine\Mlplatform20240701\Model\NodeAffinitySpecForUpdateDeploymentInput',
        'ports' => '\Volcengine\Mlplatform20240701\Model\PortForUpdateDeploymentInput[]',
        'readiness_probe' => '\Volcengine\Mlplatform20240701\Model\ReadinessProbeForUpdateDeploymentInput',
        'replicas' => 'int',
        'resource' => '\Volcengine\Mlplatform20240701\Model\ResourceForUpdateDeploymentInput',
        'rolling_update_strategy' => '\Volcengine\Mlplatform20240701\Model\RollingUpdateStrategyForUpdateDeploymentInput',
        'security_group_ids' => 'string[]',
        'shard_num' => 'int',
        'startup_probe' => '\Volcengine\Mlplatform20240701\Model\StartupProbeForUpdateDeploymentInput',
        'storages' => '\Volcengine\Mlplatform20240701\Model\StorageForUpdateDeploymentInput[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'command' => null,
        'credential' => null,
        'envs' => null,
        'expose' => null,
        'graceful_shutdown_period' => 'int32',
        'id' => null,
        'image' => null,
        'liveness_probe' => null,
        'model' => null,
        'name' => null,
        'node_affinity_spec' => null,
        'ports' => null,
        'readiness_probe' => null,
        'replicas' => 'int32',
        'resource' => null,
        'rolling_update_strategy' => null,
        'security_group_ids' => null,
        'shard_num' => 'int32',
        'startup_probe' => null,
        'storages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'command' => 'Command',
        'credential' => 'Credential',
        'envs' => 'Envs',
        'expose' => 'Expose',
        'graceful_shutdown_period' => 'GracefulShutdownPeriod',
        'id' => 'Id',
        'image' => 'Image',
        'liveness_probe' => 'LivenessProbe',
        'model' => 'Model',
        'name' => 'Name',
        'node_affinity_spec' => 'NodeAffinitySpec',
        'ports' => 'Ports',
        'readiness_probe' => 'ReadinessProbe',
        'replicas' => 'Replicas',
        'resource' => 'Resource',
        'rolling_update_strategy' => 'RollingUpdateStrategy',
        'security_group_ids' => 'SecurityGroupIds',
        'shard_num' => 'ShardNum',
        'startup_probe' => 'StartupProbe',
        'storages' => 'Storages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'command' => 'setCommand',
        'credential' => 'setCredential',
        'envs' => 'setEnvs',
        'expose' => 'setExpose',
        'graceful_shutdown_period' => 'setGracefulShutdownPeriod',
        'id' => 'setId',
        'image' => 'setImage',
        'liveness_probe' => 'setLivenessProbe',
        'model' => 'setModel',
        'name' => 'setName',
        'node_affinity_spec' => 'setNodeAffinitySpec',
        'ports' => 'setPorts',
        'readiness_probe' => 'setReadinessProbe',
        'replicas' => 'setReplicas',
        'resource' => 'setResource',
        'rolling_update_strategy' => 'setRollingUpdateStrategy',
        'security_group_ids' => 'setSecurityGroupIds',
        'shard_num' => 'setShardNum',
        'startup_probe' => 'setStartupProbe',
        'storages' => 'setStorages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'command' => 'getCommand',
        'credential' => 'getCredential',
        'envs' => 'getEnvs',
        'expose' => 'getExpose',
        'graceful_shutdown_period' => 'getGracefulShutdownPeriod',
        'id' => 'getId',
        'image' => 'getImage',
        'liveness_probe' => 'getLivenessProbe',
        'model' => 'getModel',
        'name' => 'getName',
        'node_affinity_spec' => 'getNodeAffinitySpec',
        'ports' => 'getPorts',
        'readiness_probe' => 'getReadinessProbe',
        'replicas' => 'getReplicas',
        'resource' => 'getResource',
        'rolling_update_strategy' => 'getRollingUpdateStrategy',
        'security_group_ids' => 'getSecurityGroupIds',
        'shard_num' => 'getShardNum',
        'startup_probe' => 'getStartupProbe',
        'storages' => 'getStorages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['command'] = isset($data['command']) ? $data['command'] : null;
        $this->container['credential'] = isset($data['credential']) ? $data['credential'] : null;
        $this->container['envs'] = isset($data['envs']) ? $data['envs'] : null;
        $this->container['expose'] = isset($data['expose']) ? $data['expose'] : null;
        $this->container['graceful_shutdown_period'] = isset($data['graceful_shutdown_period']) ? $data['graceful_shutdown_period'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['liveness_probe'] = isset($data['liveness_probe']) ? $data['liveness_probe'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_affinity_spec'] = isset($data['node_affinity_spec']) ? $data['node_affinity_spec'] : null;
        $this->container['ports'] = isset($data['ports']) ? $data['ports'] : null;
        $this->container['readiness_probe'] = isset($data['readiness_probe']) ? $data['readiness_probe'] : null;
        $this->container['replicas'] = isset($data['replicas']) ? $data['replicas'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
        $this->container['rolling_update_strategy'] = isset($data['rolling_update_strategy']) ? $data['rolling_update_strategy'] : null;
        $this->container['security_group_ids'] = isset($data['security_group_ids']) ? $data['security_group_ids'] : null;
        $this->container['shard_num'] = isset($data['shard_num']) ? $data['shard_num'] : null;
        $this->container['startup_probe'] = isset($data['startup_probe']) ? $data['startup_probe'] : null;
        $this->container['storages'] = isset($data['storages']) ? $data['storages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets command
     *
     * @return string
     */
    public function getCommand()
    {
        return $this->container['command'];
    }

    /**
     * Sets command
     *
     * @param string $command command
     *
     * @return $this
     */
    public function setCommand($command)
    {
        $this->container['command'] = $command;

        return $this;
    }

    /**
     * Gets credential
     *
     * @return \Volcengine\Mlplatform20240701\Model\CredentialForUpdateDeploymentInput
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param \Volcengine\Mlplatform20240701\Model\CredentialForUpdateDeploymentInput $credential credential
     *
     * @return $this
     */
    public function setCredential($credential)
    {
        $this->container['credential'] = $credential;

        return $this;
    }

    /**
     * Gets envs
     *
     * @return \Volcengine\Mlplatform20240701\Model\EnvForUpdateDeploymentInput[]
     */
    public function getEnvs()
    {
        return $this->container['envs'];
    }

    /**
     * Sets envs
     *
     * @param \Volcengine\Mlplatform20240701\Model\EnvForUpdateDeploymentInput[] $envs envs
     *
     * @return $this
     */
    public function setEnvs($envs)
    {
        $this->container['envs'] = $envs;

        return $this;
    }

    /**
     * Gets expose
     *
     * @return bool
     */
    public function getExpose()
    {
        return $this->container['expose'];
    }

    /**
     * Sets expose
     *
     * @param bool $expose expose
     *
     * @return $this
     */
    public function setExpose($expose)
    {
        $this->container['expose'] = $expose;

        return $this;
    }

    /**
     * Gets graceful_shutdown_period
     *
     * @return int
     */
    public function getGracefulShutdownPeriod()
    {
        return $this->container['graceful_shutdown_period'];
    }

    /**
     * Sets graceful_shutdown_period
     *
     * @param int $graceful_shutdown_period graceful_shutdown_period
     *
     * @return $this
     */
    public function setGracefulShutdownPeriod($graceful_shutdown_period)
    {
        $this->container['graceful_shutdown_period'] = $graceful_shutdown_period;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Volcengine\Mlplatform20240701\Model\ImageForUpdateDeploymentInput
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Volcengine\Mlplatform20240701\Model\ImageForUpdateDeploymentInput $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets liveness_probe
     *
     * @return \Volcengine\Mlplatform20240701\Model\LivenessProbeForUpdateDeploymentInput
     */
    public function getLivenessProbe()
    {
        return $this->container['liveness_probe'];
    }

    /**
     * Sets liveness_probe
     *
     * @param \Volcengine\Mlplatform20240701\Model\LivenessProbeForUpdateDeploymentInput $liveness_probe liveness_probe
     *
     * @return $this
     */
    public function setLivenessProbe($liveness_probe)
    {
        $this->container['liveness_probe'] = $liveness_probe;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \Volcengine\Mlplatform20240701\Model\ModelForUpdateDeploymentInput
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \Volcengine\Mlplatform20240701\Model\ModelForUpdateDeploymentInput $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_affinity_spec
     *
     * @return \Volcengine\Mlplatform20240701\Model\NodeAffinitySpecForUpdateDeploymentInput
     */
    public function getNodeAffinitySpec()
    {
        return $this->container['node_affinity_spec'];
    }

    /**
     * Sets node_affinity_spec
     *
     * @param \Volcengine\Mlplatform20240701\Model\NodeAffinitySpecForUpdateDeploymentInput $node_affinity_spec node_affinity_spec
     *
     * @return $this
     */
    public function setNodeAffinitySpec($node_affinity_spec)
    {
        $this->container['node_affinity_spec'] = $node_affinity_spec;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \Volcengine\Mlplatform20240701\Model\PortForUpdateDeploymentInput[]
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \Volcengine\Mlplatform20240701\Model\PortForUpdateDeploymentInput[] $ports ports
     *
     * @return $this
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets readiness_probe
     *
     * @return \Volcengine\Mlplatform20240701\Model\ReadinessProbeForUpdateDeploymentInput
     */
    public function getReadinessProbe()
    {
        return $this->container['readiness_probe'];
    }

    /**
     * Sets readiness_probe
     *
     * @param \Volcengine\Mlplatform20240701\Model\ReadinessProbeForUpdateDeploymentInput $readiness_probe readiness_probe
     *
     * @return $this
     */
    public function setReadinessProbe($readiness_probe)
    {
        $this->container['readiness_probe'] = $readiness_probe;

        return $this;
    }

    /**
     * Gets replicas
     *
     * @return int
     */
    public function getReplicas()
    {
        return $this->container['replicas'];
    }

    /**
     * Sets replicas
     *
     * @param int $replicas replicas
     *
     * @return $this
     */
    public function setReplicas($replicas)
    {
        $this->container['replicas'] = $replicas;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return \Volcengine\Mlplatform20240701\Model\ResourceForUpdateDeploymentInput
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param \Volcengine\Mlplatform20240701\Model\ResourceForUpdateDeploymentInput $resource resource
     *
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets rolling_update_strategy
     *
     * @return \Volcengine\Mlplatform20240701\Model\RollingUpdateStrategyForUpdateDeploymentInput
     */
    public function getRollingUpdateStrategy()
    {
        return $this->container['rolling_update_strategy'];
    }

    /**
     * Sets rolling_update_strategy
     *
     * @param \Volcengine\Mlplatform20240701\Model\RollingUpdateStrategyForUpdateDeploymentInput $rolling_update_strategy rolling_update_strategy
     *
     * @return $this
     */
    public function setRollingUpdateStrategy($rolling_update_strategy)
    {
        $this->container['rolling_update_strategy'] = $rolling_update_strategy;

        return $this;
    }

    /**
     * Gets security_group_ids
     *
     * @return string[]
     */
    public function getSecurityGroupIds()
    {
        return $this->container['security_group_ids'];
    }

    /**
     * Sets security_group_ids
     *
     * @param string[] $security_group_ids security_group_ids
     *
     * @return $this
     */
    public function setSecurityGroupIds($security_group_ids)
    {
        $this->container['security_group_ids'] = $security_group_ids;

        return $this;
    }

    /**
     * Gets shard_num
     *
     * @return int
     */
    public function getShardNum()
    {
        return $this->container['shard_num'];
    }

    /**
     * Sets shard_num
     *
     * @param int $shard_num shard_num
     *
     * @return $this
     */
    public function setShardNum($shard_num)
    {
        $this->container['shard_num'] = $shard_num;

        return $this;
    }

    /**
     * Gets startup_probe
     *
     * @return \Volcengine\Mlplatform20240701\Model\StartupProbeForUpdateDeploymentInput
     */
    public function getStartupProbe()
    {
        return $this->container['startup_probe'];
    }

    /**
     * Sets startup_probe
     *
     * @param \Volcengine\Mlplatform20240701\Model\StartupProbeForUpdateDeploymentInput $startup_probe startup_probe
     *
     * @return $this
     */
    public function setStartupProbe($startup_probe)
    {
        $this->container['startup_probe'] = $startup_probe;

        return $this;
    }

    /**
     * Gets storages
     *
     * @return \Volcengine\Mlplatform20240701\Model\StorageForUpdateDeploymentInput[]
     */
    public function getStorages()
    {
        return $this->container['storages'];
    }

    /**
     * Sets storages
     *
     * @param \Volcengine\Mlplatform20240701\Model\StorageForUpdateDeploymentInput[] $storages storages
     *
     * @return $this
     */
    public function setStorages($storages)
    {
        $this->container['storages'] = $storages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

