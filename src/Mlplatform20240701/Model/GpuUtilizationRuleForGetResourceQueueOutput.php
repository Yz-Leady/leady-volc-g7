<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GpuUtilizationRuleForGetResourceQueueOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GpuUtilizationRuleForGetResourceQueueOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time' => 'string',
        'creator_trn' => 'string',
        'enabled' => 'bool',
        'id' => 'string',
        'idle_shutdown_rule_types' => 'string[]',
        'minute_period' => 'int',
        'period' => 'int',
        'threshold' => 'double',
        'triggered_times' => 'int',
        'update_time' => 'string',
        'updator_trn' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time' => null,
        'creator_trn' => null,
        'enabled' => null,
        'id' => null,
        'idle_shutdown_rule_types' => null,
        'minute_period' => 'int32',
        'period' => 'int32',
        'threshold' => 'double',
        'triggered_times' => 'int32',
        'update_time' => null,
        'updator_trn' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'CreateTime',
        'creator_trn' => 'CreatorTrn',
        'enabled' => 'Enabled',
        'id' => 'Id',
        'idle_shutdown_rule_types' => 'IdleShutdownRuleTypes',
        'minute_period' => 'MinutePeriod',
        'period' => 'Period',
        'threshold' => 'Threshold',
        'triggered_times' => 'TriggeredTimes',
        'update_time' => 'UpdateTime',
        'updator_trn' => 'UpdatorTrn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'creator_trn' => 'setCreatorTrn',
        'enabled' => 'setEnabled',
        'id' => 'setId',
        'idle_shutdown_rule_types' => 'setIdleShutdownRuleTypes',
        'minute_period' => 'setMinutePeriod',
        'period' => 'setPeriod',
        'threshold' => 'setThreshold',
        'triggered_times' => 'setTriggeredTimes',
        'update_time' => 'setUpdateTime',
        'updator_trn' => 'setUpdatorTrn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'creator_trn' => 'getCreatorTrn',
        'enabled' => 'getEnabled',
        'id' => 'getId',
        'idle_shutdown_rule_types' => 'getIdleShutdownRuleTypes',
        'minute_period' => 'getMinutePeriod',
        'period' => 'getPeriod',
        'threshold' => 'getThreshold',
        'triggered_times' => 'getTriggeredTimes',
        'update_time' => 'getUpdateTime',
        'updator_trn' => 'getUpdatorTrn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const IDLE_SHUTDOWN_RULE_TYPES_CPU = 'Cpu';
    const IDLE_SHUTDOWN_RULE_TYPES_GPU = 'Gpu';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdleShutdownRuleTypesAllowableValues()
    {
        return [
            self::IDLE_SHUTDOWN_RULE_TYPES_CPU,
            self::IDLE_SHUTDOWN_RULE_TYPES_GPU,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['creator_trn'] = isset($data['creator_trn']) ? $data['creator_trn'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['idle_shutdown_rule_types'] = isset($data['idle_shutdown_rule_types']) ? $data['idle_shutdown_rule_types'] : null;
        $this->container['minute_period'] = isset($data['minute_period']) ? $data['minute_period'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['threshold'] = isset($data['threshold']) ? $data['threshold'] : null;
        $this->container['triggered_times'] = isset($data['triggered_times']) ? $data['triggered_times'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['updator_trn'] = isset($data['updator_trn']) ? $data['updator_trn'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets creator_trn
     *
     * @return string
     */
    public function getCreatorTrn()
    {
        return $this->container['creator_trn'];
    }

    /**
     * Sets creator_trn
     *
     * @param string $creator_trn creator_trn
     *
     * @return $this
     */
    public function setCreatorTrn($creator_trn)
    {
        $this->container['creator_trn'] = $creator_trn;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets idle_shutdown_rule_types
     *
     * @return string[]
     */
    public function getIdleShutdownRuleTypes()
    {
        return $this->container['idle_shutdown_rule_types'];
    }

    /**
     * Sets idle_shutdown_rule_types
     *
     * @param string[] $idle_shutdown_rule_types idle_shutdown_rule_types
     *
     * @return $this
     */
    public function setIdleShutdownRuleTypes($idle_shutdown_rule_types)
    {
        $allowedValues = $this->getIdleShutdownRuleTypesAllowableValues();
        if (!is_null($idle_shutdown_rule_types) && array_diff($idle_shutdown_rule_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'idle_shutdown_rule_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idle_shutdown_rule_types'] = $idle_shutdown_rule_types;

        return $this;
    }

    /**
     * Gets minute_period
     *
     * @return int
     */
    public function getMinutePeriod()
    {
        return $this->container['minute_period'];
    }

    /**
     * Sets minute_period
     *
     * @param int $minute_period minute_period
     *
     * @return $this
     */
    public function setMinutePeriod($minute_period)
    {
        $this->container['minute_period'] = $minute_period;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return double
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param double $threshold threshold
     *
     * @return $this
     */
    public function setThreshold($threshold)
    {
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets triggered_times
     *
     * @return int
     */
    public function getTriggeredTimes()
    {
        return $this->container['triggered_times'];
    }

    /**
     * Sets triggered_times
     *
     * @param int $triggered_times triggered_times
     *
     * @return $this
     */
    public function setTriggeredTimes($triggered_times)
    {
        $this->container['triggered_times'] = $triggered_times;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets updator_trn
     *
     * @return string
     */
    public function getUpdatorTrn()
    {
        return $this->container['updator_trn'];
    }

    /**
     * Sets updator_trn
     *
     * @param string $updator_trn updator_trn
     *
     * @return $this
     */
    public function setUpdatorTrn($updator_trn)
    {
        $this->container['updator_trn'] = $updator_trn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

