<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class PortForGetDevInstanceOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PortForGetDevInstanceOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'apig_private_url' => 'string',
        'apig_public_url' => 'string',
        'enable_public_network_access' => 'bool',
        'eni_ip' => 'string',
        'eni_port' => 'int',
        'external_ip' => 'string',
        'external_port' => 'int',
        'name' => 'string',
        'status' => '\Volcengine\Mlplatform20240701\Model\StatusForGetDevInstanceOutput',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'apig_private_url' => null,
        'apig_public_url' => null,
        'enable_public_network_access' => null,
        'eni_ip' => null,
        'eni_port' => 'int32',
        'external_ip' => null,
        'external_port' => 'int32',
        'name' => null,
        'status' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apig_private_url' => 'APIGPrivateUrl',
        'apig_public_url' => 'APIGPublicUrl',
        'enable_public_network_access' => 'EnablePublicNetworkAccess',
        'eni_ip' => 'EniIp',
        'eni_port' => 'EniPort',
        'external_ip' => 'ExternalIp',
        'external_port' => 'ExternalPort',
        'name' => 'Name',
        'status' => 'Status',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apig_private_url' => 'setApigPrivateUrl',
        'apig_public_url' => 'setApigPublicUrl',
        'enable_public_network_access' => 'setEnablePublicNetworkAccess',
        'eni_ip' => 'setEniIp',
        'eni_port' => 'setEniPort',
        'external_ip' => 'setExternalIp',
        'external_port' => 'setExternalPort',
        'name' => 'setName',
        'status' => 'setStatus',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apig_private_url' => 'getApigPrivateUrl',
        'apig_public_url' => 'getApigPublicUrl',
        'enable_public_network_access' => 'getEnablePublicNetworkAccess',
        'eni_ip' => 'getEniIp',
        'eni_port' => 'getEniPort',
        'external_ip' => 'getExternalIp',
        'external_port' => 'getExternalPort',
        'name' => 'getName',
        'status' => 'getStatus',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apig_private_url'] = isset($data['apig_private_url']) ? $data['apig_private_url'] : null;
        $this->container['apig_public_url'] = isset($data['apig_public_url']) ? $data['apig_public_url'] : null;
        $this->container['enable_public_network_access'] = isset($data['enable_public_network_access']) ? $data['enable_public_network_access'] : null;
        $this->container['eni_ip'] = isset($data['eni_ip']) ? $data['eni_ip'] : null;
        $this->container['eni_port'] = isset($data['eni_port']) ? $data['eni_port'] : null;
        $this->container['external_ip'] = isset($data['external_ip']) ? $data['external_ip'] : null;
        $this->container['external_port'] = isset($data['external_port']) ? $data['external_port'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apig_private_url
     *
     * @return string
     */
    public function getApigPrivateUrl()
    {
        return $this->container['apig_private_url'];
    }

    /**
     * Sets apig_private_url
     *
     * @param string $apig_private_url apig_private_url
     *
     * @return $this
     */
    public function setApigPrivateUrl($apig_private_url)
    {
        $this->container['apig_private_url'] = $apig_private_url;

        return $this;
    }

    /**
     * Gets apig_public_url
     *
     * @return string
     */
    public function getApigPublicUrl()
    {
        return $this->container['apig_public_url'];
    }

    /**
     * Sets apig_public_url
     *
     * @param string $apig_public_url apig_public_url
     *
     * @return $this
     */
    public function setApigPublicUrl($apig_public_url)
    {
        $this->container['apig_public_url'] = $apig_public_url;

        return $this;
    }

    /**
     * Gets enable_public_network_access
     *
     * @return bool
     */
    public function getEnablePublicNetworkAccess()
    {
        return $this->container['enable_public_network_access'];
    }

    /**
     * Sets enable_public_network_access
     *
     * @param bool $enable_public_network_access enable_public_network_access
     *
     * @return $this
     */
    public function setEnablePublicNetworkAccess($enable_public_network_access)
    {
        $this->container['enable_public_network_access'] = $enable_public_network_access;

        return $this;
    }

    /**
     * Gets eni_ip
     *
     * @return string
     */
    public function getEniIp()
    {
        return $this->container['eni_ip'];
    }

    /**
     * Sets eni_ip
     *
     * @param string $eni_ip eni_ip
     *
     * @return $this
     */
    public function setEniIp($eni_ip)
    {
        $this->container['eni_ip'] = $eni_ip;

        return $this;
    }

    /**
     * Gets eni_port
     *
     * @return int
     */
    public function getEniPort()
    {
        return $this->container['eni_port'];
    }

    /**
     * Sets eni_port
     *
     * @param int $eni_port eni_port
     *
     * @return $this
     */
    public function setEniPort($eni_port)
    {
        $this->container['eni_port'] = $eni_port;

        return $this;
    }

    /**
     * Gets external_ip
     *
     * @return string
     */
    public function getExternalIp()
    {
        return $this->container['external_ip'];
    }

    /**
     * Sets external_ip
     *
     * @param string $external_ip external_ip
     *
     * @return $this
     */
    public function setExternalIp($external_ip)
    {
        $this->container['external_ip'] = $external_ip;

        return $this;
    }

    /**
     * Gets external_port
     *
     * @return int
     */
    public function getExternalPort()
    {
        return $this->container['external_port'];
    }

    /**
     * Sets external_port
     *
     * @param int $external_port external_port
     *
     * @return $this
     */
    public function setExternalPort($external_port)
    {
        $this->container['external_port'] = $external_port;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Volcengine\Mlplatform20240701\Model\StatusForGetDevInstanceOutput
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Volcengine\Mlplatform20240701\Model\StatusForGetDevInstanceOutput $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

