<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Mlplatform20240701\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class OptionsForUpdateDevInstanceInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OptionsForUpdateDevInstanceInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_sync' => 'int',
        'meta_cache_capacity' => 'int',
        'meta_cache_expiry_minutes' => 'int',
        'meta_cache_expiry_msec' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_sync' => 'int64',
        'meta_cache_capacity' => 'int64',
        'meta_cache_expiry_minutes' => 'int64',
        'meta_cache_expiry_msec' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_sync' => 'InternalSync',
        'meta_cache_capacity' => 'MetaCacheCapacity',
        'meta_cache_expiry_minutes' => 'MetaCacheExpiryMinutes',
        'meta_cache_expiry_msec' => 'MetaCacheExpiryMsec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_sync' => 'setInternalSync',
        'meta_cache_capacity' => 'setMetaCacheCapacity',
        'meta_cache_expiry_minutes' => 'setMetaCacheExpiryMinutes',
        'meta_cache_expiry_msec' => 'setMetaCacheExpiryMsec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_sync' => 'getInternalSync',
        'meta_cache_capacity' => 'getMetaCacheCapacity',
        'meta_cache_expiry_minutes' => 'getMetaCacheExpiryMinutes',
        'meta_cache_expiry_msec' => 'getMetaCacheExpiryMsec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_sync'] = isset($data['internal_sync']) ? $data['internal_sync'] : null;
        $this->container['meta_cache_capacity'] = isset($data['meta_cache_capacity']) ? $data['meta_cache_capacity'] : null;
        $this->container['meta_cache_expiry_minutes'] = isset($data['meta_cache_expiry_minutes']) ? $data['meta_cache_expiry_minutes'] : null;
        $this->container['meta_cache_expiry_msec'] = isset($data['meta_cache_expiry_msec']) ? $data['meta_cache_expiry_msec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_sync
     *
     * @return int
     */
    public function getInternalSync()
    {
        return $this->container['internal_sync'];
    }

    /**
     * Sets internal_sync
     *
     * @param int $internal_sync internal_sync
     *
     * @return $this
     */
    public function setInternalSync($internal_sync)
    {
        $this->container['internal_sync'] = $internal_sync;

        return $this;
    }

    /**
     * Gets meta_cache_capacity
     *
     * @return int
     */
    public function getMetaCacheCapacity()
    {
        return $this->container['meta_cache_capacity'];
    }

    /**
     * Sets meta_cache_capacity
     *
     * @param int $meta_cache_capacity meta_cache_capacity
     *
     * @return $this
     */
    public function setMetaCacheCapacity($meta_cache_capacity)
    {
        $this->container['meta_cache_capacity'] = $meta_cache_capacity;

        return $this;
    }

    /**
     * Gets meta_cache_expiry_minutes
     *
     * @return int
     */
    public function getMetaCacheExpiryMinutes()
    {
        return $this->container['meta_cache_expiry_minutes'];
    }

    /**
     * Sets meta_cache_expiry_minutes
     *
     * @param int $meta_cache_expiry_minutes meta_cache_expiry_minutes
     *
     * @return $this
     */
    public function setMetaCacheExpiryMinutes($meta_cache_expiry_minutes)
    {
        $this->container['meta_cache_expiry_minutes'] = $meta_cache_expiry_minutes;

        return $this;
    }

    /**
     * Gets meta_cache_expiry_msec
     *
     * @return int
     */
    public function getMetaCacheExpiryMsec()
    {
        return $this->container['meta_cache_expiry_msec'];
    }

    /**
     * Sets meta_cache_expiry_msec
     *
     * @param int $meta_cache_expiry_msec meta_cache_expiry_msec
     *
     * @return $this
     */
    public function setMetaCacheExpiryMsec($meta_cache_expiry_msec)
    {
        $this->container['meta_cache_expiry_msec'] = $meta_cache_expiry_msec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

