<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Vod20250101\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class TemplateForGetExecutionOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TemplateForGetExecutionOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'byte_hd' => '\Volcengine\Vod20250101\Model\ByteHDForGetExecutionOutput',
        'enhance' => '\Volcengine\Vod20250101\Model\EnhanceForGetExecutionOutput',
        'transcode_audio' => '\Volcengine\Vod20250101\Model\TranscodeAudioForGetExecutionOutput',
        'transcode_video' => '\Volcengine\Vod20250101\Model\TranscodeVideoForGetExecutionOutput',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'byte_hd' => null,
        'enhance' => null,
        'transcode_audio' => null,
        'transcode_video' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'byte_hd' => 'ByteHD',
        'enhance' => 'Enhance',
        'transcode_audio' => 'TranscodeAudio',
        'transcode_video' => 'TranscodeVideo',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'byte_hd' => 'setByteHd',
        'enhance' => 'setEnhance',
        'transcode_audio' => 'setTranscodeAudio',
        'transcode_video' => 'setTranscodeVideo',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'byte_hd' => 'getByteHd',
        'enhance' => 'getEnhance',
        'transcode_audio' => 'getTranscodeAudio',
        'transcode_video' => 'getTranscodeVideo',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['byte_hd'] = isset($data['byte_hd']) ? $data['byte_hd'] : null;
        $this->container['enhance'] = isset($data['enhance']) ? $data['enhance'] : null;
        $this->container['transcode_audio'] = isset($data['transcode_audio']) ? $data['transcode_audio'] : null;
        $this->container['transcode_video'] = isset($data['transcode_video']) ? $data['transcode_video'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets byte_hd
     *
     * @return \Volcengine\Vod20250101\Model\ByteHDForGetExecutionOutput
     */
    public function getByteHd()
    {
        return $this->container['byte_hd'];
    }

    /**
     * Sets byte_hd
     *
     * @param \Volcengine\Vod20250101\Model\ByteHDForGetExecutionOutput $byte_hd byte_hd
     *
     * @return $this
     */
    public function setByteHd($byte_hd)
    {
        $this->container['byte_hd'] = $byte_hd;

        return $this;
    }

    /**
     * Gets enhance
     *
     * @return \Volcengine\Vod20250101\Model\EnhanceForGetExecutionOutput
     */
    public function getEnhance()
    {
        return $this->container['enhance'];
    }

    /**
     * Sets enhance
     *
     * @param \Volcengine\Vod20250101\Model\EnhanceForGetExecutionOutput $enhance enhance
     *
     * @return $this
     */
    public function setEnhance($enhance)
    {
        $this->container['enhance'] = $enhance;

        return $this;
    }

    /**
     * Gets transcode_audio
     *
     * @return \Volcengine\Vod20250101\Model\TranscodeAudioForGetExecutionOutput
     */
    public function getTranscodeAudio()
    {
        return $this->container['transcode_audio'];
    }

    /**
     * Sets transcode_audio
     *
     * @param \Volcengine\Vod20250101\Model\TranscodeAudioForGetExecutionOutput $transcode_audio transcode_audio
     *
     * @return $this
     */
    public function setTranscodeAudio($transcode_audio)
    {
        $this->container['transcode_audio'] = $transcode_audio;

        return $this;
    }

    /**
     * Gets transcode_video
     *
     * @return \Volcengine\Vod20250101\Model\TranscodeVideoForGetExecutionOutput
     */
    public function getTranscodeVideo()
    {
        return $this->container['transcode_video'];
    }

    /**
     * Sets transcode_video
     *
     * @param \Volcengine\Vod20250101\Model\TranscodeVideoForGetExecutionOutput $transcode_video transcode_video
     *
     * @return $this
     */
    public function setTranscodeVideo($transcode_video)
    {
        $this->container['transcode_video'] = $transcode_video;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

