<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ark\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class GetModelCustomizationJobMetricDataRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetModelCustomizationJobMetricDataRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from_step' => 'int',
        'max_metric_point' => 'string',
        'metrics' => 'string[]',
        'min_sample_step' => 'string',
        'model_customization_job_id' => 'string',
        'to_step' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from_step' => 'int32',
        'max_metric_point' => null,
        'metrics' => null,
        'min_sample_step' => null,
        'model_customization_job_id' => null,
        'to_step' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_step' => 'FromStep',
        'max_metric_point' => 'MaxMetricPoint',
        'metrics' => 'Metrics',
        'min_sample_step' => 'MinSampleStep',
        'model_customization_job_id' => 'ModelCustomizationJobId',
        'to_step' => 'ToStep'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_step' => 'setFromStep',
        'max_metric_point' => 'setMaxMetricPoint',
        'metrics' => 'setMetrics',
        'min_sample_step' => 'setMinSampleStep',
        'model_customization_job_id' => 'setModelCustomizationJobId',
        'to_step' => 'setToStep'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_step' => 'getFromStep',
        'max_metric_point' => 'getMaxMetricPoint',
        'metrics' => 'getMetrics',
        'min_sample_step' => 'getMinSampleStep',
        'model_customization_job_id' => 'getModelCustomizationJobId',
        'to_step' => 'getToStep'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_step'] = isset($data['from_step']) ? $data['from_step'] : null;
        $this->container['max_metric_point'] = isset($data['max_metric_point']) ? $data['max_metric_point'] : null;
        $this->container['metrics'] = isset($data['metrics']) ? $data['metrics'] : null;
        $this->container['min_sample_step'] = isset($data['min_sample_step']) ? $data['min_sample_step'] : null;
        $this->container['model_customization_job_id'] = isset($data['model_customization_job_id']) ? $data['model_customization_job_id'] : null;
        $this->container['to_step'] = isset($data['to_step']) ? $data['to_step'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['from_step'] === null) {
            $invalidProperties[] = "'from_step' can't be null";
        }
        if ($this->container['model_customization_job_id'] === null) {
            $invalidProperties[] = "'model_customization_job_id' can't be null";
        }
        if ($this->container['to_step'] === null) {
            $invalidProperties[] = "'to_step' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_step
     *
     * @return int
     */
    public function getFromStep()
    {
        return $this->container['from_step'];
    }

    /**
     * Sets from_step
     *
     * @param int $from_step from_step
     *
     * @return $this
     */
    public function setFromStep($from_step)
    {
        $this->container['from_step'] = $from_step;

        return $this;
    }

    /**
     * Gets max_metric_point
     *
     * @return string
     */
    public function getMaxMetricPoint()
    {
        return $this->container['max_metric_point'];
    }

    /**
     * Sets max_metric_point
     *
     * @param string $max_metric_point max_metric_point
     *
     * @return $this
     */
    public function setMaxMetricPoint($max_metric_point)
    {
        $this->container['max_metric_point'] = $max_metric_point;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return string[]
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param string[] $metrics metrics
     *
     * @return $this
     */
    public function setMetrics($metrics)
    {
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets min_sample_step
     *
     * @return string
     */
    public function getMinSampleStep()
    {
        return $this->container['min_sample_step'];
    }

    /**
     * Sets min_sample_step
     *
     * @param string $min_sample_step min_sample_step
     *
     * @return $this
     */
    public function setMinSampleStep($min_sample_step)
    {
        $this->container['min_sample_step'] = $min_sample_step;

        return $this;
    }

    /**
     * Gets model_customization_job_id
     *
     * @return string
     */
    public function getModelCustomizationJobId()
    {
        return $this->container['model_customization_job_id'];
    }

    /**
     * Sets model_customization_job_id
     *
     * @param string $model_customization_job_id model_customization_job_id
     *
     * @return $this
     */
    public function setModelCustomizationJobId($model_customization_job_id)
    {
        $this->container['model_customization_job_id'] = $model_customization_job_id;

        return $this;
    }

    /**
     * Gets to_step
     *
     * @return int
     */
    public function getToStep()
    {
        return $this->container['to_step'];
    }

    /**
     * Sets to_step
     *
     * @param int $to_step to_step
     *
     * @return $this
     */
    public function setToStep($to_step)
    {
        $this->container['to_step'] = $to_step;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

