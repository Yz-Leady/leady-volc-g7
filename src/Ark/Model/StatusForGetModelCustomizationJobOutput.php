<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ark\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class StatusForGetModelCustomizationJobOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StatusForGetModelCustomizationJobOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billable_tokens' => 'int',
        'message' => 'string',
        'output_expired_time' => 'string',
        'phase' => 'string',
        'phase_time' => 'string',
        'queue_position' => 'int',
        'resumable' => 'bool',
        'retry_count' => 'int',
        'retry_limit' => 'int',
        'training_tokens_per_epoch' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billable_tokens' => 'int64',
        'message' => null,
        'output_expired_time' => null,
        'phase' => null,
        'phase_time' => null,
        'queue_position' => 'int32',
        'resumable' => null,
        'retry_count' => 'int32',
        'retry_limit' => 'int32',
        'training_tokens_per_epoch' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billable_tokens' => 'BillableTokens',
        'message' => 'Message',
        'output_expired_time' => 'OutputExpiredTime',
        'phase' => 'Phase',
        'phase_time' => 'PhaseTime',
        'queue_position' => 'QueuePosition',
        'resumable' => 'Resumable',
        'retry_count' => 'RetryCount',
        'retry_limit' => 'RetryLimit',
        'training_tokens_per_epoch' => 'TrainingTokensPerEpoch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billable_tokens' => 'setBillableTokens',
        'message' => 'setMessage',
        'output_expired_time' => 'setOutputExpiredTime',
        'phase' => 'setPhase',
        'phase_time' => 'setPhaseTime',
        'queue_position' => 'setQueuePosition',
        'resumable' => 'setResumable',
        'retry_count' => 'setRetryCount',
        'retry_limit' => 'setRetryLimit',
        'training_tokens_per_epoch' => 'setTrainingTokensPerEpoch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billable_tokens' => 'getBillableTokens',
        'message' => 'getMessage',
        'output_expired_time' => 'getOutputExpiredTime',
        'phase' => 'getPhase',
        'phase_time' => 'getPhaseTime',
        'queue_position' => 'getQueuePosition',
        'resumable' => 'getResumable',
        'retry_count' => 'getRetryCount',
        'retry_limit' => 'getRetryLimit',
        'training_tokens_per_epoch' => 'getTrainingTokensPerEpoch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PHASE_PREPROCESSING = 'Preprocessing';
    const PHASE_QUEUED = 'Queued';
    const PHASE_DEPLOYING = 'Deploying';
    const PHASE_RUNNING = 'Running';
    const PHASE_COMPLETING = 'Completing';
    const PHASE_COMPLETED = 'Completed';
    const PHASE_TERMINATING = 'Terminating';
    const PHASE_TERMINATED = 'Terminated';
    const PHASE_FAILED = 'Failed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhaseAllowableValues()
    {
        return [
            self::PHASE_PREPROCESSING,
            self::PHASE_QUEUED,
            self::PHASE_DEPLOYING,
            self::PHASE_RUNNING,
            self::PHASE_COMPLETING,
            self::PHASE_COMPLETED,
            self::PHASE_TERMINATING,
            self::PHASE_TERMINATED,
            self::PHASE_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billable_tokens'] = isset($data['billable_tokens']) ? $data['billable_tokens'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['output_expired_time'] = isset($data['output_expired_time']) ? $data['output_expired_time'] : null;
        $this->container['phase'] = isset($data['phase']) ? $data['phase'] : null;
        $this->container['phase_time'] = isset($data['phase_time']) ? $data['phase_time'] : null;
        $this->container['queue_position'] = isset($data['queue_position']) ? $data['queue_position'] : null;
        $this->container['resumable'] = isset($data['resumable']) ? $data['resumable'] : null;
        $this->container['retry_count'] = isset($data['retry_count']) ? $data['retry_count'] : null;
        $this->container['retry_limit'] = isset($data['retry_limit']) ? $data['retry_limit'] : null;
        $this->container['training_tokens_per_epoch'] = isset($data['training_tokens_per_epoch']) ? $data['training_tokens_per_epoch'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPhaseAllowableValues();
        if (!is_null($this->container['phase']) && !in_array($this->container['phase'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'phase', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billable_tokens
     *
     * @return int
     */
    public function getBillableTokens()
    {
        return $this->container['billable_tokens'];
    }

    /**
     * Sets billable_tokens
     *
     * @param int $billable_tokens billable_tokens
     *
     * @return $this
     */
    public function setBillableTokens($billable_tokens)
    {
        $this->container['billable_tokens'] = $billable_tokens;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets output_expired_time
     *
     * @return string
     */
    public function getOutputExpiredTime()
    {
        return $this->container['output_expired_time'];
    }

    /**
     * Sets output_expired_time
     *
     * @param string $output_expired_time output_expired_time
     *
     * @return $this
     */
    public function setOutputExpiredTime($output_expired_time)
    {
        $this->container['output_expired_time'] = $output_expired_time;

        return $this;
    }

    /**
     * Gets phase
     *
     * @return string
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     *
     * @param string $phase phase
     *
     * @return $this
     */
    public function setPhase($phase)
    {
        $allowedValues = $this->getPhaseAllowableValues();
        if (!is_null($phase) && !in_array($phase, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'phase', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets phase_time
     *
     * @return string
     */
    public function getPhaseTime()
    {
        return $this->container['phase_time'];
    }

    /**
     * Sets phase_time
     *
     * @param string $phase_time phase_time
     *
     * @return $this
     */
    public function setPhaseTime($phase_time)
    {
        $this->container['phase_time'] = $phase_time;

        return $this;
    }

    /**
     * Gets queue_position
     *
     * @return int
     */
    public function getQueuePosition()
    {
        return $this->container['queue_position'];
    }

    /**
     * Sets queue_position
     *
     * @param int $queue_position queue_position
     *
     * @return $this
     */
    public function setQueuePosition($queue_position)
    {
        $this->container['queue_position'] = $queue_position;

        return $this;
    }

    /**
     * Gets resumable
     *
     * @return bool
     */
    public function getResumable()
    {
        return $this->container['resumable'];
    }

    /**
     * Sets resumable
     *
     * @param bool $resumable resumable
     *
     * @return $this
     */
    public function setResumable($resumable)
    {
        $this->container['resumable'] = $resumable;

        return $this;
    }

    /**
     * Gets retry_count
     *
     * @return int
     */
    public function getRetryCount()
    {
        return $this->container['retry_count'];
    }

    /**
     * Sets retry_count
     *
     * @param int $retry_count retry_count
     *
     * @return $this
     */
    public function setRetryCount($retry_count)
    {
        $this->container['retry_count'] = $retry_count;

        return $this;
    }

    /**
     * Gets retry_limit
     *
     * @return int
     */
    public function getRetryLimit()
    {
        return $this->container['retry_limit'];
    }

    /**
     * Sets retry_limit
     *
     * @param int $retry_limit retry_limit
     *
     * @return $this
     */
    public function setRetryLimit($retry_limit)
    {
        $this->container['retry_limit'] = $retry_limit;

        return $this;
    }

    /**
     * Gets training_tokens_per_epoch
     *
     * @return int
     */
    public function getTrainingTokensPerEpoch()
    {
        return $this->container['training_tokens_per_epoch'];
    }

    /**
     * Sets training_tokens_per_epoch
     *
     * @param int $training_tokens_per_epoch training_tokens_per_epoch
     *
     * @return $this
     */
    public function setTrainingTokensPerEpoch($training_tokens_per_epoch)
    {
        $this->container['training_tokens_per_epoch'] = $training_tokens_per_epoch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

