<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ark\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class EvaluationDatasetForCreateEvaluationJobInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EvaluationDatasetForCreateEvaluationJobInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'admin_evaluation_dataset_id' => 'string',
        'dataset_type' => 'string',
        'evaluation_ability' => 'string',
        'method' => 'string',
        'scoring_weight' => 'int',
        'tos_location' => '\Volcengine\Ark\Model\TosLocationForCreateEvaluationJobInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'admin_evaluation_dataset_id' => null,
        'dataset_type' => null,
        'evaluation_ability' => null,
        'method' => null,
        'scoring_weight' => 'int32',
        'tos_location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_evaluation_dataset_id' => 'AdminEvaluationDatasetId',
        'dataset_type' => 'DatasetType',
        'evaluation_ability' => 'EvaluationAbility',
        'method' => 'Method',
        'scoring_weight' => 'ScoringWeight',
        'tos_location' => 'TosLocation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_evaluation_dataset_id' => 'setAdminEvaluationDatasetId',
        'dataset_type' => 'setDatasetType',
        'evaluation_ability' => 'setEvaluationAbility',
        'method' => 'setMethod',
        'scoring_weight' => 'setScoringWeight',
        'tos_location' => 'setTosLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_evaluation_dataset_id' => 'getAdminEvaluationDatasetId',
        'dataset_type' => 'getDatasetType',
        'evaluation_ability' => 'getEvaluationAbility',
        'method' => 'getMethod',
        'scoring_weight' => 'getScoringWeight',
        'tos_location' => 'getTosLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DATASET_TYPE_ADMIN_DATASET = 'AdminDataset';
    const DATASET_TYPE_USER_DATASET = 'UserDataset';
    const METHOD__INCLUDE = 'Include';
    const METHOD_BUILT_IN = 'BuiltIn';
    const METHOD_MATCH = 'Match';
    const METHOD_INFERENCE_ONLY = 'InferenceOnly';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDatasetTypeAllowableValues()
    {
        return [
            self::DATASET_TYPE_ADMIN_DATASET,
            self::DATASET_TYPE_USER_DATASET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD__INCLUDE,
            self::METHOD_BUILT_IN,
            self::METHOD_MATCH,
            self::METHOD_INFERENCE_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['admin_evaluation_dataset_id'] = isset($data['admin_evaluation_dataset_id']) ? $data['admin_evaluation_dataset_id'] : null;
        $this->container['dataset_type'] = isset($data['dataset_type']) ? $data['dataset_type'] : null;
        $this->container['evaluation_ability'] = isset($data['evaluation_ability']) ? $data['evaluation_ability'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['scoring_weight'] = isset($data['scoring_weight']) ? $data['scoring_weight'] : null;
        $this->container['tos_location'] = isset($data['tos_location']) ? $data['tos_location'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDatasetTypeAllowableValues();
        if (!is_null($this->container['dataset_type']) && !in_array($this->container['dataset_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'dataset_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_evaluation_dataset_id
     *
     * @return string
     */
    public function getAdminEvaluationDatasetId()
    {
        return $this->container['admin_evaluation_dataset_id'];
    }

    /**
     * Sets admin_evaluation_dataset_id
     *
     * @param string $admin_evaluation_dataset_id admin_evaluation_dataset_id
     *
     * @return $this
     */
    public function setAdminEvaluationDatasetId($admin_evaluation_dataset_id)
    {
        $this->container['admin_evaluation_dataset_id'] = $admin_evaluation_dataset_id;

        return $this;
    }

    /**
     * Gets dataset_type
     *
     * @return string
     */
    public function getDatasetType()
    {
        return $this->container['dataset_type'];
    }

    /**
     * Sets dataset_type
     *
     * @param string $dataset_type dataset_type
     *
     * @return $this
     */
    public function setDatasetType($dataset_type)
    {
        $allowedValues = $this->getDatasetTypeAllowableValues();
        if (!is_null($dataset_type) && !in_array($dataset_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dataset_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dataset_type'] = $dataset_type;

        return $this;
    }

    /**
     * Gets evaluation_ability
     *
     * @return string
     */
    public function getEvaluationAbility()
    {
        return $this->container['evaluation_ability'];
    }

    /**
     * Sets evaluation_ability
     *
     * @param string $evaluation_ability evaluation_ability
     *
     * @return $this
     */
    public function setEvaluationAbility($evaluation_ability)
    {
        $this->container['evaluation_ability'] = $evaluation_ability;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method method
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($method) && !in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets scoring_weight
     *
     * @return int
     */
    public function getScoringWeight()
    {
        return $this->container['scoring_weight'];
    }

    /**
     * Sets scoring_weight
     *
     * @param int $scoring_weight scoring_weight
     *
     * @return $this
     */
    public function setScoringWeight($scoring_weight)
    {
        $this->container['scoring_weight'] = $scoring_weight;

        return $this;
    }

    /**
     * Gets tos_location
     *
     * @return \Volcengine\Ark\Model\TosLocationForCreateEvaluationJobInput
     */
    public function getTosLocation()
    {
        return $this->container['tos_location'];
    }

    /**
     * Sets tos_location
     *
     * @param \Volcengine\Ark\Model\TosLocationForCreateEvaluationJobInput $tos_location tos_location
     *
     * @return $this
     */
    public function setTosLocation($tos_location)
    {
        $this->container['tos_location'] = $tos_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

