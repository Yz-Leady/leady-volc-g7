<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Volcengine\Ark\Model;

use ArrayAccess;
use Volcengine\Common\ObjectSerializer;
use Volcengine\Common\ModelInterface;

class ItemForListEndpointsOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemForListEndpointsOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time' => 'string',
        'description' => 'string',
        'endpoint_model_type' => 'string',
        'id' => 'string',
        'model_reference' => '\Volcengine\Ark\Model\ModelReferenceForListEndpointsOutput',
        'model_unit_id' => 'string',
        'name' => 'string',
        'project_name' => 'string',
        'rate_limit' => '\Volcengine\Ark\Model\RateLimitForListEndpointsOutput',
        'rolling_id' => 'string',
        'status' => 'string',
        'status_reason' => 'string',
        'support_rolling' => 'bool',
        'tags' => '\Volcengine\Ark\Model\TagForListEndpointsOutput[]',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time' => null,
        'description' => null,
        'endpoint_model_type' => null,
        'id' => null,
        'model_reference' => null,
        'model_unit_id' => null,
        'name' => null,
        'project_name' => null,
        'rate_limit' => null,
        'rolling_id' => null,
        'status' => null,
        'status_reason' => null,
        'support_rolling' => null,
        'tags' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'CreateTime',
        'description' => 'Description',
        'endpoint_model_type' => 'EndpointModelType',
        'id' => 'Id',
        'model_reference' => 'ModelReference',
        'model_unit_id' => 'ModelUnitId',
        'name' => 'Name',
        'project_name' => 'ProjectName',
        'rate_limit' => 'RateLimit',
        'rolling_id' => 'RollingId',
        'status' => 'Status',
        'status_reason' => 'StatusReason',
        'support_rolling' => 'SupportRolling',
        'tags' => 'Tags',
        'update_time' => 'UpdateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'description' => 'setDescription',
        'endpoint_model_type' => 'setEndpointModelType',
        'id' => 'setId',
        'model_reference' => 'setModelReference',
        'model_unit_id' => 'setModelUnitId',
        'name' => 'setName',
        'project_name' => 'setProjectName',
        'rate_limit' => 'setRateLimit',
        'rolling_id' => 'setRollingId',
        'status' => 'setStatus',
        'status_reason' => 'setStatusReason',
        'support_rolling' => 'setSupportRolling',
        'tags' => 'setTags',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'description' => 'getDescription',
        'endpoint_model_type' => 'getEndpointModelType',
        'id' => 'getId',
        'model_reference' => 'getModelReference',
        'model_unit_id' => 'getModelUnitId',
        'name' => 'getName',
        'project_name' => 'getProjectName',
        'rate_limit' => 'getRateLimit',
        'rolling_id' => 'getRollingId',
        'status' => 'getStatus',
        'status_reason' => 'getStatusReason',
        'support_rolling' => 'getSupportRolling',
        'tags' => 'getTags',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['endpoint_model_type'] = isset($data['endpoint_model_type']) ? $data['endpoint_model_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['model_reference'] = isset($data['model_reference']) ? $data['model_reference'] : null;
        $this->container['model_unit_id'] = isset($data['model_unit_id']) ? $data['model_unit_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['rate_limit'] = isset($data['rate_limit']) ? $data['rate_limit'] : null;
        $this->container['rolling_id'] = isset($data['rolling_id']) ? $data['rolling_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_reason'] = isset($data['status_reason']) ? $data['status_reason'] : null;
        $this->container['support_rolling'] = isset($data['support_rolling']) ? $data['support_rolling'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets endpoint_model_type
     *
     * @return string
     */
    public function getEndpointModelType()
    {
        return $this->container['endpoint_model_type'];
    }

    /**
     * Sets endpoint_model_type
     *
     * @param string $endpoint_model_type endpoint_model_type
     *
     * @return $this
     */
    public function setEndpointModelType($endpoint_model_type)
    {
        $this->container['endpoint_model_type'] = $endpoint_model_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets model_reference
     *
     * @return \Volcengine\Ark\Model\ModelReferenceForListEndpointsOutput
     */
    public function getModelReference()
    {
        return $this->container['model_reference'];
    }

    /**
     * Sets model_reference
     *
     * @param \Volcengine\Ark\Model\ModelReferenceForListEndpointsOutput $model_reference model_reference
     *
     * @return $this
     */
    public function setModelReference($model_reference)
    {
        $this->container['model_reference'] = $model_reference;

        return $this;
    }

    /**
     * Gets model_unit_id
     *
     * @return string
     */
    public function getModelUnitId()
    {
        return $this->container['model_unit_id'];
    }

    /**
     * Sets model_unit_id
     *
     * @param string $model_unit_id model_unit_id
     *
     * @return $this
     */
    public function setModelUnitId($model_unit_id)
    {
        $this->container['model_unit_id'] = $model_unit_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name project_name
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets rate_limit
     *
     * @return \Volcengine\Ark\Model\RateLimitForListEndpointsOutput
     */
    public function getRateLimit()
    {
        return $this->container['rate_limit'];
    }

    /**
     * Sets rate_limit
     *
     * @param \Volcengine\Ark\Model\RateLimitForListEndpointsOutput $rate_limit rate_limit
     *
     * @return $this
     */
    public function setRateLimit($rate_limit)
    {
        $this->container['rate_limit'] = $rate_limit;

        return $this;
    }

    /**
     * Gets rolling_id
     *
     * @return string
     */
    public function getRollingId()
    {
        return $this->container['rolling_id'];
    }

    /**
     * Sets rolling_id
     *
     * @param string $rolling_id rolling_id
     *
     * @return $this
     */
    public function setRollingId($rolling_id)
    {
        $this->container['rolling_id'] = $rolling_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_reason
     *
     * @return string
     */
    public function getStatusReason()
    {
        return $this->container['status_reason'];
    }

    /**
     * Sets status_reason
     *
     * @param string $status_reason status_reason
     *
     * @return $this
     */
    public function setStatusReason($status_reason)
    {
        $this->container['status_reason'] = $status_reason;

        return $this;
    }

    /**
     * Gets support_rolling
     *
     * @return bool
     */
    public function getSupportRolling()
    {
        return $this->container['support_rolling'];
    }

    /**
     * Sets support_rolling
     *
     * @param bool $support_rolling support_rolling
     *
     * @return $this
     */
    public function setSupportRolling($support_rolling)
    {
        $this->container['support_rolling'] = $support_rolling;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Volcengine\Ark\Model\TagForListEndpointsOutput[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Volcengine\Ark\Model\TagForListEndpointsOutput[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

